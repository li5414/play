// Code generated by Wire protocol buffer compiler, do not edit.
// Source: play.IntListValue in play.proto
package play

import com.squareup.wire.*
import com.squareup.wire.Syntax.PROTO_3
import okio.ByteString
import org.eclipse.collections.api.factory.primitive.IntLists
import org.eclipse.collections.api.list.primitive.IntList
import org.eclipse.collectionx.asJava
import org.eclipse.collectionx.ofList
import play.wire.PlayProtoAdapter

public class IntListValue(
  value: IntList = IntLists.immutable.empty(),
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<IntListValue, Nothing>(ADAPTER, unknownFields) {

  constructor(
    value: List<Int> = emptyList(),
    unknownFields: ByteString = ByteString.EMPTY
  ) : this(IntLists.immutable.ofList(value), unknownFields)


  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.PACKED,
    declaredName = "value",
  )
  public val value: IntList = value.toImmutable()

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  public override fun newBuilder(): Nothing =
    throw AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is IntListValue) return false
    if (unknownFields != other.unknownFields) return false
    if (value != other.value) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + value.hashCode()
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    if (value.notEmpty()) result += """value_=$value"""
    return result.joinToString(prefix = "IntListValue{", separator = ", ", postfix = "}")
  }

  public fun copy(value: IntList = this.value, unknownFields: ByteString = this.unknownFields):
    IntListValue = IntListValue(value, unknownFields)

  public companion object {

    @JvmStatic
    val EMPTY = IntListValue(IntLists.immutable.empty())

    @JvmField
    public val ADAPTER: ProtoAdapter<IntListValue> = object : ProtoAdapter<IntListValue>(
      FieldEncoding.LENGTH_DELIMITED,
      IntListValue::class,
      "type.googleapis.com/play.IntListValue",
      PROTO_3,
      null,
      "play.proto"
    ) {
      public override fun encodedSize(`value`: IntListValue): Int {
        var size = value.unknownFields.size
        size += PlayProtoAdapter.INT32.asPacked().encodedSizeWithTag(1, value.value.asJava())
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: IntListValue): Unit {
        PlayProtoAdapter.INT32.asPacked().encodeWithTag(writer, 1, value.value.asJava())
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: IntListValue): Unit {
        writer.writeBytes(value.unknownFields)
        PlayProtoAdapter.INT32.asPacked().encodeWithTag(writer, 1, value.value.asJava())
      }

      public override fun decode(reader: ProtoReader): IntListValue {
        val value = mutableListOf<Int>()
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> value.add(PlayProtoAdapter.INT32.decode(reader))
            else -> reader.readUnknownField(tag)
          }
        }
        return IntListValue(
          value = value,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: IntListValue): IntListValue = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
