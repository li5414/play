// Code generated by Wire protocol buffer compiler, do not edit.
// Source: play.FieldOptions in play.proto
package play

import com.squareup.wire.*
import com.squareup.wire.Syntax.PROTO_3
import okio.ByteString

public class FieldOptions(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    label = WireField.Label.OMIT_IDENTITY,
    declaredName = "override",
  )
  public val override_: Boolean = false,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<FieldOptions, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  public override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is FieldOptions) return false
    if (unknownFields != other.unknownFields) return false
    if (override_ != other.override_) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + override_.hashCode()
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    result += """override_=$override_"""
    return result.joinToString(prefix = "FieldOptions{", separator = ", ", postfix = "}")
  }

  public fun copy(override_: Boolean = this.override_, unknownFields: ByteString =
      this.unknownFields): FieldOptions = FieldOptions(override_, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<FieldOptions> = object : ProtoAdapter<FieldOptions>(
      FieldEncoding.LENGTH_DELIMITED, 
      FieldOptions::class, 
      "type.googleapis.com/play.FieldOptions", 
      PROTO_3, 
      null, 
      "play.proto"
    ) {
      public override fun encodedSize(`value`: FieldOptions): Int {
        var size = value.unknownFields.size
        if (value.override_ != false) size += ProtoAdapter.BOOL.encodedSizeWithTag(1,
            value.override_)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: FieldOptions): Unit {
        if (value.override_ != false) ProtoAdapter.BOOL.encodeWithTag(writer, 1, value.override_)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: FieldOptions): Unit {
        writer.writeBytes(value.unknownFields)
        if (value.override_ != false) ProtoAdapter.BOOL.encodeWithTag(writer, 1, value.override_)
      }

      public override fun decode(reader: ProtoReader): FieldOptions {
        var override_: Boolean = false
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> override_ = ProtoAdapter.BOOL.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return FieldOptions(
          override_ = override_,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: FieldOptions): FieldOptions = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
